CACHE TABLE KPS_IPR_GENOME;

DROP TABLE IF EXISTS KPS_GENOME_IPR_ARRAY;

CREATE TABLE KPS_GENOME_IPR_ARRAY
  USING PARQUET
  AS
  SELECT
    ROW_NUMBER() OVER (PARTITION BY 1 ORDER BY ACCESSION_NUMBER) - 1 AS INDEX,
    ACCESSION_NUMBER,
    MD5(ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(IPR_ACCESSION)), '~')) AS IPR_ARRAY_UID_KEY,
    ARRAY_SORT(COLLECT_SET(IPR_ACCESSION)) AS IPR_ARRAY
    FROM
      KPS_IPR_GENOME
      GROUP BY
        ACCESSION_NUMBER;

CACHE TABLE KPS_GENOME_IPR_ARRAY;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT IPR_ARRAY_UID_KEY) AS NUM_DISTINCT_IPR_SETS,
  COUNT(DISTINCT ACCESSION_NUMBER) AS NUM_DISTINCT_GENOMES
  FROM
    KPS_GENOME_IPR_ARRAY;

DROP TABLE IF EXISTS KPS_GENOME_IPR_ARRAY_SIMILARITY;

CREATE TABLE KPS_GENOME_IPR_ARRAY_SIMILARITY
  USING PARQUET
  AS
  SELECT
    A.INDEX AS INDEX1,
    B.INDEX AS INDEX2,
    A.ACCESSION_NUMBER AS ACCESSION_NUMBER1,
    B.ACCESSION_NUMBER AS ACCESSION_NUMBER2,
    SIZE(ARRAY_INTERSECT(A.IPR_ARRAY, B.IPR_ARRAY)) AS INTERSECT_COUNT,
    SIZE(ARRAY_UNION(A.IPR_ARRAY, B.IPR_ARRAY)) AS UNION_COUNT,
    SIZE(ARRAY_INTERSECT(A.IPR_ARRAY, B.IPR_ARRAY)) / SIZE(ARRAY_UNION(A.IPR_ARRAY, B.IPR_ARRAY)) AS JACCARD_SIMILARITY
    FROM
      (SELECT *
        FROM
          KPS_GENOME_IPR_ARRAY) A
      CROSS JOIN
      (SELECT *
        FROM
          KPS_GENOME_IPR_ARRAY) B ON
        A.INDEX < B.INDEX;

CACHE TABLE KPS_GENOME_IPR_ARRAY_SIMILARITY;

SELECT
  COUNT(1) AS NUM_ROWS
  FROM
    KPS_GENOME_IPR_ARRAY_SIMILARITY;

SELECT *
  FROM
    KPS_GENOME_IPR_ARRAY_SIMILARITY
    ORDER BY 1, 2
    LIMIT 20;
