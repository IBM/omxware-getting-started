CACHE TABLE GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL;

CACHE TABLE KP_GENOME_TABLE;

DROP TABLE IF EXISTS KP_GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL;

CREATE TABLE KP_GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL
  USING PARQUET
  AS
  SELECT
    B.*,
    A.IS_HAISEQ
    FROM
      KP_GENOME_TABLE A
      INNER JOIN GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL B ON
        B.ACCESSION_NUMBER = A.ACCESSION_NUMBER;

CACHE TABLE KP_GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT ACCESSION_NUMBER) AS NUM_DISTINCT_GENOMES,
  COUNT(DISTINCT PIVOT_DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_PIVOTS,
  COUNT(DISTINCT NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_NEIGHBORS
  FROM
    KP_GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL;

SELECT
  COUNT(1) AS NUM_HAISEQ
  FROM
    KP_GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL
    WHERE
      IS_HAISEQ = 'Y';

SELECT
  COUNT(1) AS NUM_HAISEQ
  FROM
    KP_GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL
    WHERE
      IS_HAISEQ = 'N';

SELECT *
  FROM
    KP_GENOME_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL
    ORDER BY 1, 2
    LIMIT 20;
