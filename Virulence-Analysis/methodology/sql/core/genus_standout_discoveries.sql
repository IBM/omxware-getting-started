CACHE TABLE GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL;

CACHE TABLE DOMAIN_ARCHITECTURE;

CACHE TABLE PROTEIN_DETAILS;

CACHE TABLE PROTEIN_DOMAIN_ARCHITECTURE;

DROP TABLE IF EXISTS GENUS_STANDOUT_DISCOVERIES;

CREATE TABLE GENUS_STANDOUT_DISCOVERIES
  USING PARQUET
  AS
  SELECT
    GENUS_NAME,
    NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY,
    SUM(COUNT) AS COUNT
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL
      WHERE
        NEIGHBOR_TYPE = 'D'
      GROUP BY
        GENUS_NAME,
        NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY;

CACHE TABLE GENUS_STANDOUT_DISCOVERIES;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT GENUS_NAME) AS NUM_DISTINCT_GENERA,
  COUNT(DISTINCT NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_DISCOVERIES
  FROM
    GENUS_STANDOUT_DISCOVERIES;

SELECT *
  FROM
    GENUS_STANDOUT_DISCOVERIES
    ORDER BY 2 DESC
    LIMIT 10;

DROP VIEW IF EXISTS PROTEIN_NAME_DOMAIN_ARCHITECTURE;

CREATE VIEW PROTEIN_NAME_DOMAIN_ARCHITECTURE
  AS
  SELECT
    A.DOMAIN_ARCHITECTURE_UID_KEY,
    B.PROTEIN_FULLNAME
    FROM
      PROTEIN_DOMAIN_ARCHITECTURE A
      INNER JOIN PROTEIN_DETAILS B ON
        B.PROTEIN_UID_KEY = A.PROTEIN_UID_KEY
      GROUP BY
        A.DOMAIN_ARCHITECTURE_UID_KEY,
        B.PROTEIN_FULLNAME;

CACHE TABLE PROTEIN_NAME_DOMAIN_ARCHITECTURE;

DROP TABLE IF EXISTS GENUS_STANDOUT_DISCOVERIES_PROTEIN;

CREATE TABLE GENUS_STANDOUT_DISCOVERIES_PROTEIN
  USING PARQUET
  AS
  SELECT
    B.GENUS_NAME,
    B.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY,
    A.PROTEIN_FULLNAME
    FROM
      PROTEIN_NAME_DOMAIN_ARCHITECTURE A
      INNER JOIN GENUS_STANDOUT_DISCOVERIES B ON
        B.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY = A.DOMAIN_ARCHITECTURE_UID_KEY
      GROUP BY
        B.GENUS_NAME,
        B.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY,
        A.PROTEIN_FULLNAME;

CACHE TABLE GENUS_STANDOUT_DISCOVERIES_PROTEIN;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT GENUS_NAME) AS NUM_DISTINCT_GENERA,
  COUNT(DISTINCT NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_DISCOVERIES,
  COUNT(DISTINCT PROTEIN_FULLNAME) AS NUM_DISTINCT_PROTEIN_NAMES
  FROM
    GENUS_STANDOUT_DISCOVERIES_PROTEIN;

SELECT *
  FROM
    GENUS_STANDOUT_DISCOVERIES_PROTEIN
    ORDER BY 1, 2, 3
    LIMIT 10;

DROP VIEW PROTEIN_NAME_DOMAIN_ARCHITECTURE;

DROP TABLE IF EXISTS GENUS_STANDOUT_DISCOVERIES_IPR;

CREATE TABLE GENUS_STANDOUT_DISCOVERIES_IPR
  USING PARQUET
  AS
  SELECT
    A.GENUS_NAME,
    A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY,
    EXPLODE(B.DOMAIN_ARCHITECTURE) AS IPR
    FROM
      GENUS_STANDOUT_DISCOVERIES A
      INNER JOIN DOMAIN_ARCHITECTURE B ON
        B.DOMAIN_ARCHITECTURE_UID_KEY = A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY
      GROUP BY
        A.GENUS_NAME,
        A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY,
        3;

CACHE TABLE GENUS_STANDOUT_DISCOVERIES_IPR;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT GENUS_NAME) AS NUM_DISTINCT_GENERA,
  COUNT(DISTINCT NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_DISCOVERIES,
  COUNT(DISTINCT IPR) AS NUM_DISTINCT_IPRS
  FROM
    GENUS_STANDOUT_DISCOVERIES_IPR;

SELECT *
  FROM
    GENUS_STANDOUT_DISCOVERIES_IPR
    ORDER BY 1, 2, 3
    LIMIT 10;
