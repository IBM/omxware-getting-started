CACHE TABLE IPR;

CACHE TABLE IPR_PROTEIN;

DROP TABLE IF EXISTS PROTEIN_IPR_TYPE_COUNT;

CREATE TABLE PROTEIN_IPR_TYPE_COUNT
  USING PARQUET
  AS
  SELECT
    PROTEIN_UID_KEY,
    SUM(ACTIVE_SITE) AS NUM_ACTIVE_SITE,
    SUM(BINDING_SITE) AS NUM_BINDING_SITE,
    SUM(CONSERVED_SITE) AS NUM_CONSERVED_SITE,
    SUM(DOMAIN) AS NUM_DOMAIN,
    SUM(FAMILY) AS NUM_FAMILY,
    SUM(HOMOLOGOUS_SUPERFAMILY) AS NUM_HOMOLOGOUS_SUPERFAMILY,
    SUM(PTM) AS NUM_PTM,
    SUM(REPEAT) AS NUM_REPEAT
    FROM
      (SELECT
        B.PROTEIN_UID_KEY,
        CASE WHEN A.TYPE = 'ACTIVE_SITE' THEN 1 ELSE 0 END AS ACTIVE_SITE,
        CASE WHEN A.TYPE = 'BINDING_SITE' THEN 1 ELSE 0 END AS BINDING_SITE,
        CASE WHEN A.TYPE = 'CONSERVED_SITE' THEN 1 ELSE 0 END AS CONSERVED_SITE,
        CASE WHEN A.TYPE = 'DOMAIN' THEN 1 ELSE 0 END AS DOMAIN,
        CASE WHEN A.TYPE = 'FAMILY' THEN 1 ELSE 0 END AS FAMILY,
        CASE WHEN A.TYPE = 'HOMOLOGOUS_SUPERFAMILY' THEN 1 ELSE 0 END AS HOMOLOGOUS_SUPERFAMILY,
        CASE WHEN A.TYPE = 'PTM' THEN 1 ELSE 0 END AS PTM,
        CASE WHEN A.TYPE = 'REPEAT' THEN 1 ELSE 0 END AS REPEAT
        FROM
          IPR A
          INNER JOIN IPR_PROTEIN B ON
            B.IPR_ACCESSION = A.IPR_ACCESSION)
      GROUP BY
        PROTEIN_UID_KEY;

CACHE TABLE PROTEIN_IPR_TYPE_COUNT;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT PROTEIN_UID_KEY) AS NUM_DISTINCT_PROTEINS
  FROM
    PROTEIN_IPR_TYPE_COUNT;

SELECT *
  FROM
    PROTEIN_IPR_TYPE_COUNT
    ORDER BY 1
    LIMIT 10;

DROP TABLE IF EXISTS PROTEIN_IPR_ARRAY;

CREATE TABLE PROTEIN_IPR_ARRAY
  USING PARQUET
  AS
  SELECT
    PROTEIN_UID_KEY,
    ARRAY_SORT(COLLECT_SET(IPR_ACCESSION)) AS DOMAIN_ARCHITECTURE
    FROM
      IPR_PROTEIN
      GROUP BY
        PROTEIN_UID_KEY;

CACHE TABLE PROTEIN_IPR_ARRAY;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT PROTEIN_UID_KEY) AS NUM_DISTINCT_PROTEINS
  FROM
    PROTEIN_IPR_ARRAY;

SELECT *
  FROM
    PROTEIN_IPR_ARRAY
    ORDER BY 1
    LIMIT 5;

DROP TABLE IF EXISTS DOMAIN_ARCHITECTURE;

CREATE TABLE DOMAIN_ARCHITECTURE
  USING PARQUET
  AS
  SELECT DISTINCT
    MD5(ARRAY_JOIN(DOMAIN_ARCHITECTURE, '~')) AS DOMAIN_ARCHITECTURE_UID_KEY,
    NUM_ACTIVE_SITE,
    NUM_BINDING_SITE,
    NUM_CONSERVED_SITE,
    NUM_DOMAIN,
    NUM_FAMILY,
    NUM_HOMOLOGOUS_SUPERFAMILY,
    NUM_PTM,
    NUM_REPEAT,
    SIZE(DOMAIN_ARCHITECTURE) AS FUNCTION_COUNT,
    DOMAIN_ARCHITECTURE
    FROM
      PROTEIN_IPR_ARRAY A
      INNER JOIN PROTEIN_IPR_TYPE_COUNT B ON
        B.PROTEIN_UID_KEY = A.PROTEIN_UID_KEY;

CACHE TABLE DOMAIN_ARCHITECTURE;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_DAS,
  MIN(FUNCTION_COUNT) AS MIN_DA_SIZE,
  MAX(FUNCTION_COUNT) AS MAX_DA_SIZE,
  MEAN(FUNCTION_COUNT) AS MEAN_DA_SIZE,
  MEDIAN(COLLECT_LIST(FUNCTION_COUNT)) AS MEDIAN_DA_SIZE,
  MODE(COLLECT_LIST(FUNCTION_COUNT)) AS MODE_DA_SIZE,
  STDDEV_POP(FUNCTION_COUNT) AS STDDEV_DA_SIZE
  FROM
    DOMAIN_ARCHITECTURE;

SELECT *
  FROM
    DOMAIN_ARCHITECTURE
    ORDER BY 1
    LIMIT 5;

DROP TABLE IF EXISTS PROTEIN_DOMAIN_ARCHITECTURE;

CREATE TABLE PROTEIN_DOMAIN_ARCHITECTURE
  USING PARQUET
  AS
  SELECT
    PROTEIN_UID_KEY,
    MD5(ARRAY_JOIN(DOMAIN_ARCHITECTURE, '~')) AS DOMAIN_ARCHITECTURE_UID_KEY
    FROM
      PROTEIN_IPR_ARRAY;

CACHE TABLE PROTEIN_DOMAIN_ARCHITECTURE;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT PROTEIN_UID_KEY) AS NUM_DISTINCT_PROTEINS,
  COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_DAS
  FROM
    PROTEIN_DOMAIN_ARCHITECTURE;

SELECT *
  FROM
    PROTEIN_DOMAIN_ARCHITECTURE
    ORDER BY 1, 2
    LIMIT 10;

DROP TABLE PROTEIN_IPR_TYPE_COUNT;

DROP TABLE PROTEIN_IPR_ARRAY;
