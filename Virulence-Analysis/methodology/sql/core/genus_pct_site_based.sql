CACHE TABLE DOMAIN_ARCHITECTURE;

CACHE TABLE GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL;

-- represents the unique count of site only domain architectures BEFORE computing minimum cutoff threshold

SELECT
  COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_SITE_ONLY_DAS
  FROM
    DOMAIN_ARCHITECTURE
    WHERE
      NUM_DOMAIN = 0 AND
      NUM_FAMILY = 0 AND
      NUM_HOMOLOGOUS_SUPERFAMILY = 0;

DROP VIEW IF EXISTS SITE_ONLY_DOMAIN_ARCHITECTURE;

-- represents the unique set of site only domain architectures AFTER computing minimum cutoff threshold

CREATE VIEW SITE_ONLY_DOMAIN_ARCHITECTURE
  AS
  SELECT DISTINCT
    B.DOMAIN_ARCHITECTURE_UID_KEY
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL A
      INNER JOIN DOMAIN_ARCHITECTURE B ON
        B.DOMAIN_ARCHITECTURE_UID_KEY = A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY
      WHERE
        B.NUM_DOMAIN = 0 AND
        B.NUM_FAMILY = 0 AND
        B.NUM_HOMOLOGOUS_SUPERFAMILY = 0;

CACHE TABLE SITE_ONLY_DOMAIN_ARCHITECTURE;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_SITE_ONLY_DAS
  FROM
    SITE_ONLY_DOMAIN_ARCHITECTURE;

SELECT *
  FROM
    SITE_ONLY_DOMAIN_ARCHITECTURE
    ORDER BY 1
    LIMIT 5;

DROP VIEW IF EXISTS PIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE;

CREATE VIEW PIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE
  AS
  SELECT DISTINCT
    A.PIVOT_DOMAIN_ARCHITECTURE_UID_KEY AS DOMAIN_ARCHITECTURE_UID_KEY
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL A
      INNER JOIN SITE_ONLY_DOMAIN_ARCHITECTURE B ON
        B.DOMAIN_ARCHITECTURE_UID_KEY = A.PIVOT_DOMAIN_ARCHITECTURE_UID_KEY
      WHERE
        A.NEIGHBOR_TYPE = 'P';

CACHE TABLE PIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_SITE_ONLY_DAS
  FROM
    PIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE;

SELECT *
  FROM
    PIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE
    ORDER BY 1
    LIMIT 5;

DROP VIEW IF EXISTS COPIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE;

CREATE VIEW COPIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE
  AS
  SELECT DISTINCT
    A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY AS DOMAIN_ARCHITECTURE_UID_KEY
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL A
      INNER JOIN SITE_ONLY_DOMAIN_ARCHITECTURE B ON
        B.DOMAIN_ARCHITECTURE_UID_KEY = A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY
      WHERE
        A.NEIGHBOR_TYPE = 'C';

CACHE TABLE COPIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_SITE_ONLY_DAS
  FROM
    COPIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE;

SELECT *
  FROM
    COPIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE
    ORDER BY 1
    LIMIT 5;

DROP VIEW IF EXISTS DISCOVERED_SITE_ONLY_DOMAIN_ARCHITECTURE;

CREATE VIEW DISCOVERED_SITE_ONLY_DOMAIN_ARCHITECTURE
  AS
  SELECT DISTINCT
    A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY AS DOMAIN_ARCHITECTURE_UID_KEY
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL A
      INNER JOIN SITE_ONLY_DOMAIN_ARCHITECTURE B ON
        B.DOMAIN_ARCHITECTURE_UID_KEY = A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY
      WHERE
        A.NEIGHBOR_TYPE = 'D';

CACHE TABLE DISCOVERED_SITE_ONLY_DOMAIN_ARCHITECTURE;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_SITE_ONLY_DAS
  FROM
    DISCOVERED_SITE_ONLY_DOMAIN_ARCHITECTURE;

SELECT *
  FROM
    DISCOVERED_SITE_ONLY_DOMAIN_ARCHITECTURE
    ORDER BY 1
    LIMIT 5;

DROP VIEW IF EXISTS PIVOT_SITE_ONLY_COUNT_BY_GENUS;

CREATE VIEW PIVOT_SITE_ONLY_COUNT_BY_GENUS
  AS
  SELECT
    A.GENUS_NAME,
    COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_SITE_ONLY_DAS
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL A
      INNER JOIN PIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE B ON
        B.DOMAIN_ARCHITECTURE_UID_KEY = A.PIVOT_DOMAIN_ARCHITECTURE_UID_KEY
      WHERE
        A.NEIGHBOR_TYPE = 'P'
      GROUP BY
        A.GENUS_NAME;

CACHE TABLE PIVOT_SITE_ONLY_COUNT_BY_GENUS;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT GENUS_NAME) AS NUM_DISTINCT_GENERA
  FROM
    PIVOT_SITE_ONLY_COUNT_BY_GENUS;

SELECT *
  FROM
    PIVOT_SITE_ONLY_COUNT_BY_GENUS
    ORDER BY 2 DESC
    LIMIT 10;

DROP VIEW IF EXISTS COPIVOT_SITE_ONLY_COUNT_BY_GENUS;

CREATE VIEW COPIVOT_SITE_ONLY_COUNT_BY_GENUS
  AS
  SELECT
    A.GENUS_NAME,
    COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_SITE_ONLY_DAS
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL A
      INNER JOIN COPIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE B ON
        B.DOMAIN_ARCHITECTURE_UID_KEY = A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY
      WHERE
        A.NEIGHBOR_TYPE = 'C'
      GROUP BY
        A.GENUS_NAME;

CACHE TABLE COPIVOT_SITE_ONLY_COUNT_BY_GENUS;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT GENUS_NAME) AS NUM_DISTINCT_GENERA
  FROM
    COPIVOT_SITE_ONLY_COUNT_BY_GENUS;

SELECT *
  FROM
    COPIVOT_SITE_ONLY_COUNT_BY_GENUS
    ORDER BY 2 DESC
    LIMIT 10;

DROP VIEW IF EXISTS DISCOVERED_SITE_ONLY_COUNT_BY_GENUS;

CREATE VIEW DISCOVERED_SITE_ONLY_COUNT_BY_GENUS
  AS
  SELECT
    A.GENUS_NAME,
    COUNT(DISTINCT DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_SITE_ONLY_DAS
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL A
      INNER JOIN DISCOVERED_SITE_ONLY_DOMAIN_ARCHITECTURE B ON
        B.DOMAIN_ARCHITECTURE_UID_KEY = A.NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY
      WHERE
        A.NEIGHBOR_TYPE = 'D'
      GROUP BY
        A.GENUS_NAME;

CACHE TABLE DISCOVERED_SITE_ONLY_COUNT_BY_GENUS;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT GENUS_NAME) AS NUM_DISTINCT_GENERA
  FROM
    DISCOVERED_SITE_ONLY_COUNT_BY_GENUS;

SELECT *
  FROM
    DISCOVERED_SITE_ONLY_COUNT_BY_GENUS
    ORDER BY 2 DESC
    LIMIT 10;

DROP VIEW IF EXISTS GENUS_DOMAIN_ARCHITECTURE_COUNT;

CREATE VIEW GENUS_DOMAIN_ARCHITECTURE_COUNT
  AS
  SELECT
    GENUS_NAME,
    COUNT(DISTINCT NEIGHBOR_DOMAIN_ARCHITECTURE_UID_KEY) AS NUM_DISTINCT_DAS
    FROM
      GENUS_PIVOT_NEIGHBOR_DOMAIN_COUNT_FINAL
      GROUP BY
        GENUS_NAME;

CACHE TABLE GENUS_DOMAIN_ARCHITECTURE_COUNT;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT GENUS_NAME) AS NUM_DISTINCT_GENERA
  FROM
    GENUS_DOMAIN_ARCHITECTURE_COUNT;

SELECT *
  FROM
    GENUS_DOMAIN_ARCHITECTURE_COUNT
    ORDER BY 2 DESC
    LIMIT 10;

DROP TABLE IF EXISTS GENUS_PCT_SITE_BASED;

CREATE TABLE GENUS_PCT_SITE_BASED
  USING PARQUET
  AS
  SELECT DISTINCT
    A.GENUS_NAME,
    A.NUM_DISTINCT_DAS AS NUM_DISTINCT_DAS,
    CASE WHEN B.GENUS_NAME IS NULL
      THEN 0
      ELSE B.NUM_DISTINCT_SITE_ONLY_DAS
    END AS NUM_DISTINCT_SITE_ONLY_PIVOT_DAS,
    CASE WHEN C.GENUS_NAME IS NULL
      THEN 0
      ELSE C.NUM_DISTINCT_SITE_ONLY_DAS
    END AS NUM_DISTINCT_SITE_ONLY_COPIVOT_DAS,
    CASE WHEN D.GENUS_NAME IS NULL
      THEN 0
      ELSE D.NUM_DISTINCT_SITE_ONLY_DAS
    END AS NUM_DISTINCT_SITE_ONLY_DISCOVERED_DAS,
    CASE WHEN B.GENUS_NAME IS NULL
      THEN 0
      ELSE (B.NUM_DISTINCT_SITE_ONLY_DAS / A.NUM_DISTINCT_DAS) * 100.0
    END AS PCT_SITE_ONLY_PIVOTS,
    CASE WHEN C.GENUS_NAME IS NULL
      THEN 0
      ELSE (C.NUM_DISTINCT_SITE_ONLY_DAS / A.NUM_DISTINCT_DAS) * 100.0
    END AS PCT_SITE_ONLY_COPIVOTS,
    CASE WHEN D.GENUS_NAME IS NULL
      THEN 0
      ELSE (D.NUM_DISTINCT_SITE_ONLY_DAS / A.NUM_DISTINCT_DAS) * 100.0
    END AS PCT_SITE_ONLY_DISCOVERED
    FROM
      GENUS_DOMAIN_ARCHITECTURE_COUNT A
      LEFT JOIN PIVOT_SITE_ONLY_COUNT_BY_GENUS B ON
        B.GENUS_NAME = A.GENUS_NAME
      LEFT JOIN COPIVOT_SITE_ONLY_COUNT_BY_GENUS C ON
        C.GENUS_NAME = A.GENUS_NAME
      LEFT JOIN DISCOVERED_SITE_ONLY_COUNT_BY_GENUS D ON
        D.GENUS_NAME = A.GENUS_NAME;

CACHE TABLE GENUS_PCT_SITE_BASED;

SELECT
  COUNT(1) AS NUM_ROWS,
  COUNT(DISTINCT GENUS_NAME) AS NUM_DISTINCT_GENERA
  FROM
    GENUS_PCT_SITE_BASED;

SELECT *
  FROM
    GENUS_PCT_SITE_BASED
    LIMIT 10;

DROP VIEW DISCOVERED_SITE_ONLY_COUNT_BY_GENUS;

DROP VIEW COPIVOT_SITE_ONLY_COUNT_BY_GENUS;

DROP VIEW PIVOT_SITE_ONLY_COUNT_BY_GENUS;

DROP VIEW DISCOVERED_SITE_ONLY_DOMAIN_ARCHITECTURE;

DROP VIEW COPIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE;

DROP VIEW PIVOT_SITE_ONLY_DOMAIN_ARCHITECTURE;

DROP VIEW SITE_ONLY_DOMAIN_ARCHITECTURE;
